# üìö Book Rental API ‚Äî Group 2

A backend system for managing a small library‚Äôs operations, including **books**, **users**, and **rentals**. Built with **Node.js**, **Express**, and **PostgreSQL**.

---

## üöÄ Objective

To build a RESTful API that supports:
- Book and user registration
- Renting and returning books
- Automatically tracking availability
- Identifying overdue rentals

---

## üß± Tech Stack

- **Backend:** Node.js + Express.js  
- **Database:** PostgreSQL  
- **ORM/Query Builder:** Sequelize / Knex.js / raw SQL *(your choice)*  
- **Other:** Node-cron (for scheduling, optional)

---

## üóÉÔ∏è Database Schema

### üìò books

| Field         | Type      | Description               |
|---------------|-----------|---------------------------|
| id            | UUID      | Primary Key               |
| title         | TEXT      | Book title                |
| author        | TEXT      | Book author               |
| isAvailable   | BOOLEAN   | True if book is not rented|

---

### üë§ users

| Field         | Type      | Description          |
|---------------|-----------|----------------------|
| id            | UUID      | Primary Key          |
| name          | TEXT      | Full name            |
| email         | TEXT      | Unique user email    |

---

### üîÑ rentals

| Field         | Type      | Description                         |
|---------------|-----------|-------------------------------------|
| id            | UUID      | Primary Key                         |
| userId        | UUID      | FK to `users(id)`                   |
| bookId        | UUID      | FK to `books(id)`                   |
| rentedAt      | TIMESTAMP | When the book was rented            |
| dueDate       | DATE      | When the book should be returned    |
| returnedAt    | TIMESTAMP | When the book was actually returned |

---

### ‚ö†Ô∏è overdue_records

| Field         | Type      | Description                         |
|---------------|-----------|-------------------------------------|
| id            | UUID      | Primary Key                         |
| rentalId      | UUID      | FK to `rentals(id)`                 |
| isOverdue     | BOOLEAN   | True if past due and not returned   |
| markedAt      | TIMESTAMP | When it was marked as overdue       |

---

## üì° API Endpoints

### üìö Books

| Method | Endpoint       | Description         |
|--------|----------------|---------------------|
| POST   | /books         | Add new book        |
| GET    | /books/:id     | Get book by ID      |
| PUT    | /books/:id     | Update book info    |
| DELETE | /books/:id     | Delete a book       |

---

### üë§ Users

| Method | Endpoint       | Description         |
|--------|----------------|---------------------|
| POST   | /users         | Register new user   |
| GET    | /users/:id     | Get user by ID      |
| PUT    | /users/:id     | Update user info    |
| DELETE | /users/:id     | Delete a user       |

---

### üîÑ Rentals

| Method | Endpoint                 | Description            |
|--------|--------------------------|------------------------|
| POST   | /rentals                 | Rent a book            |
| PUT    | /rentals/:id/return      | Return a rented book   |

> ‚úÖ When a book is rented, `isAvailable = false`  
> ‚úÖ When returned, `isAvailable = true`

---

### üõ† Maintenance

| Method | Endpoint                   | Description                          |
|--------|----------------------------|--------------------------------------|
| POST   | /maintenance/check-overdue | Mark overdue rentals (manual trigger)|

> üîÑ This route can be run via CRON (e.g., every night) or called manually to:
> - Find books not returned after `dueDate`
> - Add entries to `overdue_records`

---

## üõ† Setup Instructions

1. **Clone the repo**
   ```bash
   git clone https://github.com/yourname/book-rental-api.git
   cd book-rental-api
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Configure environment variables** in `.env`
   ```env
   DB_HOST=localhost
   DB_PORT=5432
   DB_USER=your_user
   DB_PASS=your_password
   DB_NAME=book_rental
   ```

4. **Run DB migrations** (if using ORM like Sequelize or Knex)
   ```bash
   npx sequelize-cli db:migrate
   ```

5. **Start server**
   ```bash
   npm run dev
   ```

---

## üß™ Testing API

Use Postman or cURL to test the endpoints. Example:

```bash
curl -X POST http://localhost:3000/books \
-H "Content-Type: application/json" \
-d '{"title": "1984", "author": "George Orwell"}'
```

---

## ‚è∞ CRON Setup (Optional)

Set up a daily cron job to call `/maintenance/check-overdue`:

```bash
0 0 * * * curl -X POST http://localhost:3000/maintenance/check-overdue
```

---

## üë• Contributors

- Group 2 Team Members:
  - [Member 1 Name]
  - [Member 2 Name]
  - ...
